name: Build Flutter Release APK

on:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'

      - name: Fix Android project structure
        run: |
          # Ensure android directory exists
          mkdir -p android/app/src/main/kotlin/com/example/big_fan_voice_chat
          mkdir -p android/gradle/wrapper
          
          # Create proper android/app/build.gradle
          cat > android/app/build.gradle << 'EOF'
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }

          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
          }

          def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
          if (flutterVersionCode == null) {
              flutterVersionCode = '1'
          }

          def flutterVersionName = localProperties.getProperty('flutter.versionName')
          if (flutterVersionName == null) {
              flutterVersionName = '1.0'
          }

          def keystoreProperties = new Properties()
          def keystorePropertiesFile = rootProject.file('key.properties')
          if (keystorePropertiesFile.exists()) {
              keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
          }

          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'
          apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

          android {
              compileSdkVersion 34
              ndkVersion flutter.ndkVersion

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }

              kotlinOptions {
                  jvmTarget = '1.8'
              }

              sourceSets {
                  main.java.srcDirs += 'src/main/kotlin'
              }

              defaultConfig {
                  applicationId "com.bigfun.voicechat"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode flutterVersionCode.toInteger()
                  versionName flutterVersionName
              }

              signingConfigs {
                  release {
                      keyAlias keystoreProperties['keyAlias']
                      keyPassword keystoreProperties['keyPassword']
                      storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                      storePassword keystoreProperties['storePassword']
                  }
              }

              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
                  debug {
                      signingConfig signingConfigs.debug
                  }
              }
          }

          flutter {
              source '../..'
          }

          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10"
          }
          EOF

          # Create android/build.gradle
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext.kotlin_version = '1.7.10'
              repositories {
                  google()
                  mavenCentral()
              }

              dependencies {
                  classpath 'com.android.tools.build:gradle:7.3.0'
                  classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }

          rootProject.buildDir = '../build'
          subprojects {
              project.buildDir = "${rootProject.buildDir}/${project.name}"
          }
          subprojects {
              project.evaluationDependsOn(':app')
          }

          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF

          # Create android/settings.gradle
          cat > android/settings.gradle << 'EOF'
          include ':app'

          def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
          def properties = new Properties()

          assert localPropertiesFile.exists()
          localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }

          def flutterSdkPath = properties.getProperty("flutter.sdk")
          assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
          apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
          EOF

          # Create gradle wrapper properties
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-all.zip
          EOF

          # Create local.properties
          echo "flutter.sdk=$FLUTTER_ROOT" > android/local.properties
          echo "sdk.dir=$ANDROID_HOME" >> android/local.properties

          # Make gradlew executable
          chmod +x android/gradlew

      - name: Decode keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/release-keystore.jks

      - name: Configure key.properties
        run: |
          echo "storePassword=Bigfun@2580" > android/key.properties
          echo "keyPassword=Bigfun@2580" >> android/key.properties
          echo "keyAlias=bigfun" >> android/key.properties
          echo "storeFile=release-keystore.jks" >> android/key.properties

      - name: Clean and get packages
        run: |
          flutter clean
          flutter pub get

      - name: Verify project structure
        run: |
          echo "Verifying Android project structure..."
          ls -la android/
          ls -la android/app/
          echo "Checking key.properties..."
          cat android/key.properties
          echo "Checking if keystore exists..."
          ls -la android/app/release-keystore.jks

      - name: Build APK (Release Signed)
        run: |
          echo "Starting release APK build..."
          flutter build apk --release --verbose
          
          echo "Build completed. Checking for APK..."
          find . -name "*.apk" -type f -exec ls -lh {} \;

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: flutter-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: error
