name: Build Flutter APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 🔹 Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 🔹 Step 2: Setup Java (Java 17 required for Gradle/Flutter)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 🔹 Step 3: Setup Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      # 🔹 Step 4: Flutter Doctor Check
      - name: Flutter Doctor
        run: flutter doctor -v

      # 🔹 Step 5: Clean and get dependencies
      - name: Clean and Get Dependencies
        run: |
          flutter clean
          flutter pub get
          flutter pub deps

      # 🔹 Step 6: Ensure Android wrapper exists and permissions
      - name: Setup Android Gradlew
        run: |
          if [ ! -f android/gradlew ]; then
            echo "⚠️ gradlew missing, creating android project..."
            flutter create . --platforms=android
          fi
          chmod +x android/gradlew
          ls -la android/

      # 🔹 Step 7: Verify project structure
      - name: Verify Project Structure
        run: |
          echo "📁 Project structure:"
          find . -name "*.gradle" -type f | head -10
          echo "📱 Android folder contents:"
          ls -la android/app/

      # 🔹 Step 8: Build Debug APK (safer first)
      - name: Build APK (Debug)
        run: |
          echo "🔨 Building Debug APK..."
          flutter build apk --debug --verbose --no-tree-shake-icons
        continue-on-error: false

      # 🔹 Step 9: Check if debug APK was created
      - name: Verify Debug APK Creation
        run: |
          if [ -f build/app/outputs/flutter-apk/app-debug.apk ]; then
            echo "✅ Debug APK created successfully"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "❌ Debug APK not found"
            find build -name "*.apk" -type f || echo "No APK files found"
            exit 1
          fi

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: flutter-debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk
          if-no-files-found: error

      # 🔹 Step 10: Build Release APK (only if debug succeeds)
      - name: Build APK (Release)
        run: |
          echo "🚀 Building Release APK..."
          flutter build apk --release --verbose --no-tree-shake-icons
        continue-on-error: true

      # 🔹 Step 11: Check if release APK was created
      - name: Verify Release APK Creation
        run: |
          if [ -f build/app/outputs/flutter-apk/app-release.apk ]; then
            echo "✅ Release APK created successfully"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "⚠️ Release APK not found, checking for any APK files..."
            find build -name "*.apk" -type f || echo "No release APK files found"
          fi

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: flutter-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: warn

      # 🔹 Step 12: Build info summary
      - name: Build Summary
        run: |
          echo "📊 Build Summary:"
          echo "Flutter Version: $(flutter --version | head -1)"
          echo "Java Version: $(java -version 2>&1 | head -1)"
          echo "Gradle Version: $(cd android && ./gradlew --version | grep Gradle | head -1)"
          echo "📦 APK Files:"
          find build -name "*.apk" -type f -exec ls -la {} \; || echo "No APK files found"
        if: always()
